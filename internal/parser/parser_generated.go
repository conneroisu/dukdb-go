// Code generated by goyacc -o internal/parser/parser_generated.go internal/parser/duckdb.y. DO NOT EDIT.

//line internal/parser/duckdb.y:2
package parser

import __yyfmt__ "fmt"

//line internal/parser/duckdb.y:2

import (
	"github.com/connerohnesorge/dukdb-go/internal/ast"
)

//line internal/parser/duckdb.y:10
type yySymType struct {
	yys         int
	str         string
	integer     int64
	float       float64
	boolean     bool
	node        ast.Node
	stmt        ast.Statement
	expr        ast.Expression
	selectItem  ast.SelectItem
	selectItems []ast.SelectItem
	tableRef    ast.TableRef
	tableRefs   []ast.TableRef
	exprs       []ast.Expression
	orderItem   ast.OrderItem
	orderItems  []ast.OrderItem
	strs        []string
	assignments []ast.UpdateAssignment
	columnDef   ast.ColumnDef
	columnDefs  []ast.ColumnDef
	dataType    ast.DataType
	joinType    ast.JoinType
	binaryOp    ast.BinaryOperator
	unaryOp     ast.UnaryOperator
}

const IDENT = 57346
const STRING = 57347
const INT = 57348
const FLOAT = 57349
const EQ = 57350
const NEQ = 57351
const LT = 57352
const LE = 57353
const GT = 57354
const GE = 57355
const PLUS = 57356
const MINUS = 57357
const MULTIPLY = 57358
const DIVIDE = 57359
const MODULO = 57360
const POWER = 57361
const AND = 57362
const OR = 57363
const NOT = 57364
const CONCAT = 57365
const LIKE = 57366
const ILIKE = 57367
const IN = 57368
const IS = 57369
const ASSIGN = 57370
const COMMA = 57371
const SEMICOLON = 57372
const LPAREN = 57373
const RPAREN = 57374
const LBRACKET = 57375
const RBRACKET = 57376
const LBRACE = 57377
const RBRACE = 57378
const DOT = 57379
const SELECT = 57380
const FROM = 57381
const WHERE = 57382
const GROUP = 57383
const BY = 57384
const HAVING = 57385
const ORDER = 57386
const LIMIT = 57387
const OFFSET = 57388
const DISTINCT = 57389
const ALL = 57390
const AS = 57391
const JOIN = 57392
const INNER = 57393
const LEFT = 57394
const RIGHT = 57395
const FULL = 57396
const OUTER = 57397
const CROSS = 57398
const ON = 57399
const USING = 57400
const INSERT = 57401
const INTO = 57402
const VALUES = 57403
const UPDATE = 57404
const SET = 57405
const DELETE = 57406
const CREATE = 57407
const DROP = 57408
const ALTER = 57409
const TABLE = 57410
const INDEX = 57411
const VIEW = 57412
const INTEGER = 57413
const BIGINT = 57414
const SMALLINT = 57415
const TINYINT = 57416
const BOOLEAN = 57417
const DOUBLE = 57418
const DECIMAL = 57419
const VARCHAR = 57420
const CHAR = 57421
const TEXT = 57422
const DATE = 57423
const TIME = 57424
const TIMESTAMP = 57425
const INTERVAL = 57426
const BLOB = 57427
const UUID = 57428
const LIST = 57429
const STRUCT = 57430
const MAP = 57431
const ARRAY = 57432
const NULL = 57433
const TRUE = 57434
const FALSE = 57435
const DEFAULT = 57436
const PRIMARY = 57437
const KEY = 57438
const FOREIGN = 57439
const REFERENCES = 57440
const UNIQUE = 57441
const CHECK = 57442
const CONSTRAINT = 57443
const IF = 57444
const EXISTS = 57445
const CASCADE = 57446
const RESTRICT = 57447
const ASC = 57448
const DESC = 57449
const COUNT = 57450
const SUM = 57451
const AVG = 57452
const MIN = 57453
const MAX = 57454
const CASE = 57455
const WHEN = 57456
const THEN = 57457
const ELSE = 57458
const END = 57459
const OVER = 57460
const PARTITION = 57461
const ROWS = 57462
const RANGE = 57463
const BETWEEN = 57464
const UNBOUNDED = 57465
const PRECEDING = 57466
const FOLLOWING = 57467
const CURRENT = 57468
const ROW = 57469
const UMINUS = 57470

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"STRING",
	"INT",
	"FLOAT",
	"EQ",
	"NEQ",
	"LT",
	"LE",
	"GT",
	"GE",
	"PLUS",
	"MINUS",
	"MULTIPLY",
	"DIVIDE",
	"MODULO",
	"POWER",
	"AND",
	"OR",
	"NOT",
	"CONCAT",
	"LIKE",
	"ILIKE",
	"IN",
	"IS",
	"ASSIGN",
	"COMMA",
	"SEMICOLON",
	"LPAREN",
	"RPAREN",
	"LBRACKET",
	"RBRACKET",
	"LBRACE",
	"RBRACE",
	"DOT",
	"SELECT",
	"FROM",
	"WHERE",
	"GROUP",
	"BY",
	"HAVING",
	"ORDER",
	"LIMIT",
	"OFFSET",
	"DISTINCT",
	"ALL",
	"AS",
	"JOIN",
	"INNER",
	"LEFT",
	"RIGHT",
	"FULL",
	"OUTER",
	"CROSS",
	"ON",
	"USING",
	"INSERT",
	"INTO",
	"VALUES",
	"UPDATE",
	"SET",
	"DELETE",
	"CREATE",
	"DROP",
	"ALTER",
	"TABLE",
	"INDEX",
	"VIEW",
	"INTEGER",
	"BIGINT",
	"SMALLINT",
	"TINYINT",
	"BOOLEAN",
	"DOUBLE",
	"DECIMAL",
	"VARCHAR",
	"CHAR",
	"TEXT",
	"DATE",
	"TIME",
	"TIMESTAMP",
	"INTERVAL",
	"BLOB",
	"UUID",
	"LIST",
	"STRUCT",
	"MAP",
	"ARRAY",
	"NULL",
	"TRUE",
	"FALSE",
	"DEFAULT",
	"PRIMARY",
	"KEY",
	"FOREIGN",
	"REFERENCES",
	"UNIQUE",
	"CHECK",
	"CONSTRAINT",
	"IF",
	"EXISTS",
	"CASCADE",
	"RESTRICT",
	"ASC",
	"DESC",
	"COUNT",
	"SUM",
	"AVG",
	"MIN",
	"MAX",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"OVER",
	"PARTITION",
	"ROWS",
	"RANGE",
	"BETWEEN",
	"UNBOUNDED",
	"PRECEDING",
	"FOLLOWING",
	"CURRENT",
	"ROW",
	"UMINUS",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line internal/parser/duckdb.y:595

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 663

var yyAct = [...]int16{
	92, 261, 168, 135, 136, 91, 110, 138, 106, 236,
	235, 102, 19, 19, 213, 25, 22, 2, 37, 21,
	19, 49, 47, 48, 53, 208, 17, 24, 198, 18,
	46, 45, 87, 199, 19, 89, 52, 93, 44, 54,
	55, 57, 258, 227, 63, 196, 97, 34, 124, 35,
	197, 226, 90, 8, 225, 194, 19, 49, 47, 48,
	195, 25, 200, 193, 126, 115, 46, 45, 230, 19,
	99, 107, 101, 8, 44, 221, 98, 244, 245, 228,
	111, 114, 189, 34, 190, 35, 215, 214, 108, 117,
	15, 16, 141, 103, 9, 127, 125, 10, 20, 11,
	12, 13, 150, 120, 134, 8, 265, 43, 50, 51,
	58, 56, 131, 122, 151, 132, 129, 154, 269, 203,
	19, 156, 60, 137, 38, 139, 103, 95, 160, 31,
	152, 153, 61, 94, 165, 120, 163, 159, 167, 120,
	121, 256, 210, 43, 50, 51, 119, 113, 233, 191,
	192, 164, 219, 130, 255, 167, 205, 187, 166, 206,
	38, 111, 111, 104, 162, 31, 88, 161, 158, 201,
	202, 157, 212, 144, 145, 146, 147, 148, 96, 149,
	224, 209, 253, 120, 142, 105, 137, 273, 252, 211,
	222, 144, 145, 146, 147, 148, 223, 149, 78, 254,
	218, 217, 216, 133, 268, 231, 72, 259, 19, 14,
	42, 40, 234, 257, 243, 39, 237, 41, 36, 238,
	229, 241, 67, 242, 65, 246, 66, 64, 143, 100,
	239, 128, 260, 250, 220, 123, 240, 140, 137, 251,
	33, 32, 188, 30, 29, 28, 262, 247, 27, 248,
	263, 26, 112, 109, 59, 23, 7, 6, 267, 5,
	4, 3, 1, 0, 0, 0, 0, 0, 0, 0,
	262, 274, 0, 266, 79, 80, 81, 82, 83, 84,
	73, 74, 75, 76, 77, 78, 85, 86, 0, 68,
	69, 70, 71, 72, 79, 80, 81, 82, 83, 84,
	73, 74, 75, 76, 77, 78, 85, 86, 0, 68,
	69, 70, 71, 72, 79, 80, 81, 82, 83, 84,
	73, 74, 75, 76, 77, 78, 85, 86, 0, 68,
	69, 70, 71, 72, 79, 80, 81, 82, 83, 84,
	73, 74, 75, 76, 77, 78, 85, 86, 0, 68,
	69, 70, 71, 72, 79, 80, 81, 82, 83, 84,
	73, 74, 75, 76, 77, 78, 85, 86, 0, 68,
	69, 70, 71, 72, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 272, 0, 0, 0, 0, 0, 79,
	80, 81, 82, 83, 84, 73, 74, 75, 76, 77,
	78, 85, 86, 264, 68, 69, 70, 71, 72, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 249, 0, 0, 0, 0, 0, 79, 80,
	81, 82, 83, 84, 73, 74, 75, 76, 77, 78,
	85, 86, 232, 68, 69, 70, 71, 72, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 174, 0, 0,
	0, 204, 79, 80, 81, 82, 83, 84, 73, 74,
	75, 76, 77, 78, 85, 86, 0, 68, 69, 70,
	71, 72, 19, 49, 47, 48, 0, 0, 19, 49,
	47, 48, 46, 45, 0, 0, 155, 0, 46, 45,
	44, 0, 0, 0, 0, 0, 44, 0, 0, 34,
	0, 35, 0, 0, 0, 34, 8, 35, 0, 0,
	0, 169, 170, 171, 172, 173, 175, 176, 177, 0,
	178, 179, 180, 181, 116, 182, 183, 184, 185, 186,
	79, 80, 81, 82, 83, 84, 73, 74, 75, 76,
	77, 78, 85, 86, 0, 68, 69, 70, 71, 72,
	270, 271, 0, 0, 207, 0, 0, 0, 0, 43,
	50, 51, 0, 0, 0, 43, 50, 51, 0, 0,
	0, 0, 0, 0, 0, 0, 38, 0, 0, 0,
	0, 31, 38, 0, 19, 0, 0, 31, 79, 80,
	81, 82, 83, 84, 73, 74, 75, 76, 77, 78,
	85, 86, 0, 68, 69, 70, 71, 72, 79, 80,
	81, 82, 83, 84, 73, 74, 75, 76, 77, 78,
	85, 86, 0, 68, 69, 70, 71, 72, 0, 62,
	0, 0, 118, 79, 80, 81, 82, 83, 84, 73,
	74, 75, 76, 77, 78, 85, 86, 0, 68, 69,
	70, 71, 72,
}

var yyPact = [...]int16{
	35, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 43, -34,
	204, 59, -49, -52, 484, -1000, -1000, 204, -39, -1000,
	204, 9, 8, 93, -1000, 590, -1000, -1000, -1000, -1000,
	-1000, 52, -1000, -1000, 478, 484, 484, 96, 147, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 15, 204, 53, 132, 163, -1000, -95, 53,
	484, 116, 204, -1000, 484, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 420, 484, 610,
	114, 106, 635, 179, 204, 16, 48, 204, 122, -1000,
	86, 195, -1000, 484, 204, -96, 204, 51, -1000, 155,
	141, 65, -1000, 67, -1000, 635, 484, 381, -1000, -1000,
	484, -1000, -1000, 139, -1000, 635, 105, 484, 135, -1000,
	484, -1000, 204, 484, 635, 126, -1000, 450, 204, -1000,
	39, 42, 116, 116, -1000, 13, 5, -5, -22, 12,
	204, 204, -1000, 87, 346, 484, 635, -1000, 484, -1000,
	532, -36, 204, 110, 181, 635, -1000, 204, -8, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 192, 191, 190, 121, 31, 484,
	484, 141, 123, -1000, -1000, 4, -1000, 1, -1000, -7,
	-1000, 30, -1000, 19, 484, 326, 635, -1000, 117, -1000,
	-1000, 484, -1000, -81, -87, 484, 450, 204, 450, 204,
	32, 36, 635, 154, 484, -1000, -1000, -1000, 204, -1000,
	204, 306, 484, 484, 635, -1000, -1000, 635, 176, 170,
	-1000, 125, 109, -4, 201, 484, 635, -1000, -1000, 484,
	286, 74, -1000, -1000, 204, 450, -1000, -1000, 198, -1000,
	89, -1000, 454, 266, -1000, -1000, -1000, 175, -1000, 484,
	-1000, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 262, 17, 261, 260, 259, 257, 256, 255, 27,
	254, 253, 6, 252, 0, 251, 248, 245, 244, 243,
	11, 242, 241, 240, 5, 237, 235, 234, 232, 1,
	231, 230, 229, 3, 4, 2, 228, 227, 226, 224,
	222, 218, 18, 217, 215, 214, 213, 211, 210, 209,
}

var yyR1 = [...]int8{
	0, 1, 1, 1, 1, 1, 1, 2, 49, 49,
	49, 8, 8, 9, 9, 9, 10, 10, 11, 11,
	12, 12, 12, 12, 12, 12, 12, 12, 13, 13,
	36, 36, 36, 36, 36, 36, 36, 36, 36, 20,
	20, 25, 25, 21, 21, 27, 27, 28, 28, 29,
	29, 29, 45, 45, 46, 46, 24, 24, 14, 14,
	14, 14, 14, 14, 14, 15, 15, 15, 15, 16,
	37, 37, 37, 37, 37, 37, 37, 37, 39, 39,
	39, 39, 39, 39, 38, 38, 38, 38, 38, 38,
	40, 40, 17, 41, 41, 41, 22, 22, 22, 22,
	22, 23, 23, 18, 18, 18, 18, 26, 26, 19,
	3, 3, 3, 30, 30, 4, 32, 32, 5, 6,
	6, 33, 33, 34, 34, 34, 34, 35, 35, 35,
	35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
	35, 35, 35, 35, 35, 31, 31, 7, 7, 42,
	43, 44, 47, 48, 48,
}

var yyR2 = [...]int8{
	0, 1, 1, 1, 1, 1, 1, 10, 0, 1,
	1, 1, 3, 1, 3, 2, 0, 2, 1, 3,
	1, 3, 3, 2, 5, 4, 1, 5, 5, 3,
	1, 2, 2, 3, 2, 3, 2, 3, 2, 0,
	2, 0, 3, 0, 2, 0, 3, 1, 3, 1,
	2, 2, 0, 2, 0, 2, 1, 3, 1, 1,
	1, 1, 1, 9, 8, 1, 1, 3, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 4, 3, 4, 5, 1, 3, 3,
	10, 7, 4, 1, 3, 5, 3, 5, 4, 6,
	9, 1, 3, 2, 4, 4, 4, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 4, 6, 1, 3, 3, 5, 1,
	1, 1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -4, -5, -6, -7, 38, 59,
	62, 64, 65, 66, -49, 47, 48, 60, -42, 4,
	39, 68, 68, -8, -9, -14, -15, -16, -17, -18,
	-19, 113, -22, -23, 31, 33, -41, -42, 108, -44,
	-47, -43, -48, 91, 22, 15, 14, 6, 7, 5,
	92, 93, -42, 63, -42, -42, 102, -42, 102, -10,
	29, 39, 49, -42, -37, -39, -38, -40, 23, 24,
	25, 26, 27, 14, 15, 16, 17, 18, 19, 8,
	9, 10, 11, 12, 13, 20, 21, -14, 114, -14,
	-2, -24, -14, -14, 37, 31, 31, 31, 61, -2,
	-32, -42, -20, 40, 31, 22, 103, -20, -9, -11,
	-12, -42, -13, 31, -42, -14, 114, -14, 32, 32,
	29, 34, -42, -26, 32, -14, 16, 47, -30, -42,
	31, -20, 29, 8, -14, -33, -34, -42, 103, -42,
	-25, 41, 29, -36, 50, 51, 52, 53, 54, 56,
	37, 49, -42, -2, -14, 115, -14, 32, 29, 32,
	-14, 32, 29, -24, -42, -14, 32, 29, -35, 71,
	72, 73, 74, 75, 7, 76, 77, 78, 80, 81,
	82, 83, 85, 86, 87, 88, 89, -42, -21, 43,
	42, -12, -12, 50, 50, 55, 50, 55, 50, 55,
	50, -42, -42, 32, 115, -14, -14, 32, 61, -42,
	32, 8, -34, 22, 95, 94, 10, 10, 10, 31,
	-27, 44, -14, -24, 57, 50, 50, 50, 49, -42,
	49, -14, 116, 31, -14, 91, 96, -14, -35, -31,
	-42, -35, -33, -45, 45, 42, -14, -42, -42, 116,
	-14, -24, 12, 12, 29, 29, 32, -46, 46, 6,
	-28, -29, -14, -14, 117, 32, -42, -35, 6, 29,
	106, 107, 117, 12, -29,
}

var yyDef = [...]int16{
	0, -2, 1, 2, 3, 4, 5, 6, 8, 0,
	0, 0, 0, 0, 0, 9, 10, 0, 0, 149,
	0, 0, 0, 16, 11, 13, 58, 59, 60, 61,
	62, 0, 65, 66, 0, 0, 0, 101, 0, 96,
	97, 98, 99, 100, 93, 94, 95, 151, 152, 150,
	153, 154, 0, 0, 39, 0, 0, 147, 0, 39,
	0, 0, 0, 15, 0, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 87, 88, 89, 90, 91, 0, 0, 0,
	0, 0, 56, 92, 0, 0, 0, 0, 0, 112,
	39, 0, 118, 0, 0, 0, 0, 41, 12, 17,
	18, 20, 26, 0, 14, 69, 0, 0, 67, 109,
	0, 68, 102, 0, 104, 107, 0, 0, 0, 113,
	0, 115, 0, 0, 40, 0, 121, 0, 0, 148,
	43, 0, 0, 0, 30, 0, 0, 0, 0, 0,
	0, 0, 23, 0, 0, 0, 57, 103, 0, 105,
	0, 0, 0, 0, 0, 116, 119, 0, 123, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	138, 139, 140, 141, 0, 0, 0, 0, 45, 0,
	0, 19, 29, 31, 32, 0, 34, 0, 36, 0,
	38, 21, 22, 0, 0, 0, 108, 106, 0, 114,
	111, 0, 122, 0, 0, 0, 0, 0, 0, 0,
	52, 0, 44, 42, 0, 33, 35, 37, 0, 25,
	0, 0, 0, 0, 117, 124, 125, 126, 0, 0,
	145, 0, 0, 54, 0, 0, 28, 24, 27, 0,
	0, 0, 142, 143, 0, 0, 120, 7, 0, 53,
	46, 47, 49, 0, 64, 110, 146, 0, 55, 0,
	50, 51, 63, 144, 48,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]uint8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:118
		{
			yyVAL.stmt = yyDollar[1].stmt
			yylex.(*yyLexerImpl).result = yyDollar[1].stmt
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:119
		{
			yyVAL.stmt = yyDollar[1].stmt
			yylex.(*yyLexerImpl).result = yyDollar[1].stmt
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:120
		{
			yyVAL.stmt = yyDollar[1].stmt
			yylex.(*yyLexerImpl).result = yyDollar[1].stmt
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:121
		{
			yyVAL.stmt = yyDollar[1].stmt
			yylex.(*yyLexerImpl).result = yyDollar[1].stmt
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:122
		{
			yyVAL.stmt = yyDollar[1].stmt
			yylex.(*yyLexerImpl).result = yyDollar[1].stmt
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:123
		{
			yyVAL.stmt = yyDollar[1].stmt
			yylex.(*yyLexerImpl).result = yyDollar[1].stmt
		}
	case 7:
		yyDollar = yyS[yypt-10 : yypt+1]
//line internal/parser/duckdb.y:129
		{
			selectStmt := &ast.SelectStmt{
				SelectList: yyDollar[3].selectItems,
				From:       yyDollar[4].tableRefs,
				Where:      yyDollar[5].expr,
				GroupBy:    yyDollar[6].exprs,
				Having:     yyDollar[7].expr,
				OrderBy:    yyDollar[8].orderItems,
				Distinct:   yyDollar[2].boolean,
			}
			if yyDollar[9].integer != 0 {
				limit := yyDollar[9].integer
				selectStmt.Limit = &limit
			}
			if yyDollar[10].integer != 0 {
				offset := yyDollar[10].integer
				selectStmt.Offset = &offset
			}
			yyVAL.stmt = selectStmt
		}
	case 8:
		yyDollar = yyS[yypt-0 : yypt+1]
//line internal/parser/duckdb.y:152
		{
			yyVAL.boolean = false
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:153
		{
			yyVAL.boolean = true
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:154
		{
			yyVAL.boolean = false
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:158
		{
			yyVAL.selectItems = []ast.SelectItem{yyDollar[1].selectItem}
		}
	case 12:
		yyDollar = yyS[yypt-3 : yypt+1]
//line internal/parser/duckdb.y:159
		{
			yyVAL.selectItems = append(yyDollar[1].selectItems, yyDollar[3].selectItem)
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:163
		{
			yyVAL.selectItem = ast.SelectItem{Expression: yyDollar[1].expr}
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
//line internal/parser/duckdb.y:164
		{
			yyVAL.selectItem = ast.SelectItem{Expression: yyDollar[1].expr, Alias: yyDollar[3].str}
		}
	case 15:
		yyDollar = yyS[yypt-2 : yypt+1]
//line internal/parser/duckdb.y:165
		{
			yyVAL.selectItem = ast.SelectItem{Expression: yyDollar[1].expr, Alias: yyDollar[2].str}
		}
	case 16:
		yyDollar = yyS[yypt-0 : yypt+1]
//line internal/parser/duckdb.y:169
		{
			yyVAL.tableRefs = nil
		}
	case 17:
		yyDollar = yyS[yypt-2 : yypt+1]
//line internal/parser/duckdb.y:170
		{
			yyVAL.tableRefs = yyDollar[2].tableRefs
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:174
		{
			yyVAL.tableRefs = []ast.TableRef{yyDollar[1].tableRef}
		}
	case 19:
		yyDollar = yyS[yypt-3 : yypt+1]
//line internal/parser/duckdb.y:175
		{
			yyVAL.tableRefs = append(yyDollar[1].tableRefs, yyDollar[3].tableRef)
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:179
		{
			yyVAL.tableRef = &ast.TableName{Name: yyDollar[1].str}
		}
	case 21:
		yyDollar = yyS[yypt-3 : yypt+1]
//line internal/parser/duckdb.y:180
		{
			yyVAL.tableRef = &ast.TableName{Schema: yyDollar[1].str, Name: yyDollar[3].str}
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
//line internal/parser/duckdb.y:181
		{
			yyVAL.tableRef = &ast.TableName{Name: yyDollar[1].str, Alias: yyDollar[3].str}
		}
	case 23:
		yyDollar = yyS[yypt-2 : yypt+1]
//line internal/parser/duckdb.y:182
		{
			yyVAL.tableRef = &ast.TableName{Name: yyDollar[1].str, Alias: yyDollar[2].str}
		}
	case 24:
		yyDollar = yyS[yypt-5 : yypt+1]
//line internal/parser/duckdb.y:183
		{
			yyVAL.tableRef = &ast.TableName{Schema: yyDollar[1].str, Name: yyDollar[3].str, Alias: yyDollar[5].str}
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
//line internal/parser/duckdb.y:184
		{
			yyVAL.tableRef = &ast.TableName{Schema: yyDollar[1].str, Name: yyDollar[3].str, Alias: yyDollar[4].str}
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:185
		{
			yyVAL.tableRef = yyDollar[1].tableRef
		}
	case 27:
		yyDollar = yyS[yypt-5 : yypt+1]
//line internal/parser/duckdb.y:186
		{
			yyVAL.tableRef = &ast.TableName{Name: "(" + yyDollar[2].stmt.String() + ")", Alias: yyDollar[5].str}
		}
	case 28:
		yyDollar = yyS[yypt-5 : yypt+1]
//line internal/parser/duckdb.y:193
		{
			yyVAL.tableRef = &ast.JoinExpr{
				Left:      yyDollar[1].tableRef,
				Right:     yyDollar[3].tableRef,
				JoinType:  yyDollar[2].joinType,
				Condition: yyDollar[5].expr,
			}
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
//line internal/parser/duckdb.y:202
		{
			yyVAL.tableRef = &ast.JoinExpr{
				Left:     yyDollar[1].tableRef,
				Right:    yyDollar[3].tableRef,
				JoinType: yyDollar[2].joinType,
			}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:212
		{
			yyVAL.joinType = ast.InnerJoin
		}
	case 31:
		yyDollar = yyS[yypt-2 : yypt+1]
//line internal/parser/duckdb.y:213
		{
			yyVAL.joinType = ast.InnerJoin
		}
	case 32:
		yyDollar = yyS[yypt-2 : yypt+1]
//line internal/parser/duckdb.y:214
		{
			yyVAL.joinType = ast.LeftJoin
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line internal/parser/duckdb.y:215
		{
			yyVAL.joinType = ast.LeftJoin
		}
	case 34:
		yyDollar = yyS[yypt-2 : yypt+1]
//line internal/parser/duckdb.y:216
		{
			yyVAL.joinType = ast.RightJoin
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line internal/parser/duckdb.y:217
		{
			yyVAL.joinType = ast.RightJoin
		}
	case 36:
		yyDollar = yyS[yypt-2 : yypt+1]
//line internal/parser/duckdb.y:218
		{
			yyVAL.joinType = ast.FullJoin
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line internal/parser/duckdb.y:219
		{
			yyVAL.joinType = ast.FullJoin
		}
	case 38:
		yyDollar = yyS[yypt-2 : yypt+1]
//line internal/parser/duckdb.y:220
		{
			yyVAL.joinType = ast.CrossJoin
		}
	case 39:
		yyDollar = yyS[yypt-0 : yypt+1]
//line internal/parser/duckdb.y:224
		{
			yyVAL.expr = nil
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
//line internal/parser/duckdb.y:225
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 41:
		yyDollar = yyS[yypt-0 : yypt+1]
//line internal/parser/duckdb.y:229
		{
			yyVAL.exprs = nil
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line internal/parser/duckdb.y:230
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line internal/parser/duckdb.y:234
		{
			yyVAL.expr = nil
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
//line internal/parser/duckdb.y:235
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 45:
		yyDollar = yyS[yypt-0 : yypt+1]
//line internal/parser/duckdb.y:239
		{
			yyVAL.orderItems = nil
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line internal/parser/duckdb.y:240
		{
			yyVAL.orderItems = yyDollar[3].orderItems
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:244
		{
			yyVAL.orderItems = []ast.OrderItem{yyDollar[1].orderItem}
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line internal/parser/duckdb.y:245
		{
			yyVAL.orderItems = append(yyDollar[1].orderItems, yyDollar[3].orderItem)
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:249
		{
			yyVAL.orderItem = ast.OrderItem{Expression: yyDollar[1].expr, Direction: ast.Ascending}
		}
	case 50:
		yyDollar = yyS[yypt-2 : yypt+1]
//line internal/parser/duckdb.y:250
		{
			yyVAL.orderItem = ast.OrderItem{Expression: yyDollar[1].expr, Direction: ast.Ascending}
		}
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
//line internal/parser/duckdb.y:251
		{
			yyVAL.orderItem = ast.OrderItem{Expression: yyDollar[1].expr, Direction: ast.Descending}
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
//line internal/parser/duckdb.y:255
		{
			yyVAL.integer = 0
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line internal/parser/duckdb.y:256
		{
			yyVAL.integer = yyDollar[2].integer
		}
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
//line internal/parser/duckdb.y:260
		{
			yyVAL.integer = 0
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line internal/parser/duckdb.y:261
		{
			yyVAL.integer = yyDollar[2].integer
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:266
		{
			yyVAL.exprs = []ast.Expression{yyDollar[1].expr}
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line internal/parser/duckdb.y:267
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:271
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:272
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:273
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:274
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:275
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 63:
		yyDollar = yyS[yypt-9 : yypt+1]
//line internal/parser/duckdb.y:277
		{
			yyVAL.expr = &ast.CaseExpr{
				Expression: yyDollar[2].expr,
				WhenClauses: []ast.WhenClause{
					{Condition: yyDollar[4].expr, Result: yyDollar[6].expr},
				},
				ElseClause: yyDollar[8].expr,
			}
		}
	case 64:
		yyDollar = yyS[yypt-8 : yypt+1]
//line internal/parser/duckdb.y:287
		{
			yyVAL.expr = &ast.CaseExpr{
				WhenClauses: []ast.WhenClause{
					{Condition: yyDollar[3].expr, Result: yyDollar[5].expr},
				},
				ElseClause: yyDollar[7].expr,
			}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:298
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:299
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line internal/parser/duckdb.y:300
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line internal/parser/duckdb.y:302
		{
			// DuckDB LIST literal
			yyVAL.expr = &ast.ListExpr{Elements: yyDollar[2].exprs, ElementType: ast.Varchar}
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line internal/parser/duckdb.y:309
		{
			yyVAL.expr = &ast.BinaryExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].binaryOp, Right: yyDollar[3].expr}
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:313
		{
			yyVAL.binaryOp = yyDollar[1].binaryOp
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:314
		{
			yyVAL.binaryOp = yyDollar[1].binaryOp
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:315
		{
			yyVAL.binaryOp = yyDollar[1].binaryOp
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:316
		{
			yyVAL.binaryOp = ast.Concat
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:317
		{
			yyVAL.binaryOp = ast.Like
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:318
		{
			yyVAL.binaryOp = ast.ILike
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:319
		{
			yyVAL.binaryOp = ast.In
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:320
		{
			yyVAL.binaryOp = ast.Is
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:324
		{
			yyVAL.binaryOp = ast.Add
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:325
		{
			yyVAL.binaryOp = ast.Subtract
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:326
		{
			yyVAL.binaryOp = ast.Multiply
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:327
		{
			yyVAL.binaryOp = ast.Divide
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:328
		{
			yyVAL.binaryOp = ast.Modulo
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:329
		{
			yyVAL.binaryOp = ast.Power
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:333
		{
			yyVAL.binaryOp = ast.Equal
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:334
		{
			yyVAL.binaryOp = ast.NotEqual
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:335
		{
			yyVAL.binaryOp = ast.LessThan
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:336
		{
			yyVAL.binaryOp = ast.LessThanOrEqual
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:337
		{
			yyVAL.binaryOp = ast.GreaterThan
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:338
		{
			yyVAL.binaryOp = ast.GreaterThanOrEqual
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:342
		{
			yyVAL.binaryOp = ast.And
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:343
		{
			yyVAL.binaryOp = ast.Or
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
//line internal/parser/duckdb.y:347
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: yyDollar[1].unaryOp, Operand: yyDollar[2].expr}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:351
		{
			yyVAL.unaryOp = ast.Not
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:352
		{
			yyVAL.unaryOp = ast.Minus
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:353
		{
			yyVAL.unaryOp = ast.Plus
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:357
		{
			yyVAL.expr = &ast.LiteralExpr{Value: yyDollar[1].integer, Type: ast.BigInt}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:358
		{
			yyVAL.expr = &ast.LiteralExpr{Value: yyDollar[1].float, Type: ast.Double}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:359
		{
			yyVAL.expr = &ast.LiteralExpr{Value: yyDollar[1].str, Type: ast.Varchar}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:360
		{
			yyVAL.expr = &ast.LiteralExpr{Value: yyDollar[1].boolean, Type: ast.Boolean}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:361
		{
			yyVAL.expr = &ast.LiteralExpr{Value: nil, Type: ast.Varchar}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:365
		{
			yyVAL.expr = &ast.ColumnRef{Column: yyDollar[1].str, Type: ast.Varchar}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line internal/parser/duckdb.y:366
		{
			yyVAL.expr = &ast.ColumnRef{Table: yyDollar[1].str, Column: yyDollar[3].str, Type: ast.Varchar}
		}
	case 103:
		yyDollar = yyS[yypt-4 : yypt+1]
//line internal/parser/duckdb.y:371
		{
			yyVAL.expr = &ast.FunctionCall{
				Name:       yyDollar[1].str,
				Arguments:  yyDollar[3].exprs,
				ReturnType: ast.Varchar,
			}
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line internal/parser/duckdb.y:379
		{
			yyVAL.expr = &ast.FunctionCall{
				Name:       yyDollar[1].str,
				Arguments:  nil,
				ReturnType: ast.Varchar,
			}
		}
	case 105:
		yyDollar = yyS[yypt-4 : yypt+1]
//line internal/parser/duckdb.y:387
		{
			yyVAL.expr = &ast.FunctionCall{
				Name:       "COUNT",
				Arguments:  nil,
				ReturnType: ast.BigInt,
			}
		}
	case 106:
		yyDollar = yyS[yypt-5 : yypt+1]
//line internal/parser/duckdb.y:395
		{
			yyVAL.expr = &ast.FunctionCall{
				Name:       "COUNT",
				Arguments:  []ast.Expression{yyDollar[4].expr},
				Distinct:   true,
				ReturnType: ast.BigInt,
			}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:406
		{
			yyVAL.exprs = []ast.Expression{yyDollar[1].expr}
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line internal/parser/duckdb.y:407
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line internal/parser/duckdb.y:411
		{
			yyVAL.expr = &ast.SubqueryExpr{Query: yyDollar[2].stmt.(*ast.SelectStmt)}
		}
	case 110:
		yyDollar = yyS[yypt-10 : yypt+1]
//line internal/parser/duckdb.y:417
		{
			yyVAL.stmt = &ast.InsertStmt{
				Table:   ast.TableName{Name: yyDollar[3].str},
				Columns: yyDollar[5].strs,
				Values:  [][]ast.Expression{yyDollar[9].exprs},
			}
		}
	case 111:
		yyDollar = yyS[yypt-7 : yypt+1]
//line internal/parser/duckdb.y:425
		{
			yyVAL.stmt = &ast.InsertStmt{
				Table:  ast.TableName{Name: yyDollar[3].str},
				Values: [][]ast.Expression{yyDollar[6].exprs},
			}
		}
	case 112:
		yyDollar = yyS[yypt-4 : yypt+1]
//line internal/parser/duckdb.y:432
		{
			yyVAL.stmt = &ast.InsertStmt{
				Table:  ast.TableName{Name: yyDollar[3].str},
				Select: yyDollar[4].stmt.(*ast.SelectStmt),
			}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:441
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line internal/parser/duckdb.y:442
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 115:
		yyDollar = yyS[yypt-5 : yypt+1]
//line internal/parser/duckdb.y:448
		{
			yyVAL.stmt = &ast.UpdateStmt{
				Table: ast.TableName{Name: yyDollar[2].str},
				Set:   yyDollar[4].assignments,
				Where: yyDollar[5].expr,
			}
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line internal/parser/duckdb.y:459
		{
			yyVAL.assignments = []ast.UpdateAssignment{{Column: yyDollar[1].str, Value: yyDollar[3].expr}}
		}
	case 117:
		yyDollar = yyS[yypt-5 : yypt+1]
//line internal/parser/duckdb.y:463
		{
			yyVAL.assignments = append(yyDollar[1].assignments, ast.UpdateAssignment{Column: yyDollar[3].str, Value: yyDollar[5].expr})
		}
	case 118:
		yyDollar = yyS[yypt-4 : yypt+1]
//line internal/parser/duckdb.y:471
		{
			yyVAL.stmt = &ast.DeleteStmt{
				Table: ast.TableName{Name: yyDollar[3].str},
				Where: yyDollar[4].expr,
			}
		}
	case 119:
		yyDollar = yyS[yypt-6 : yypt+1]
//line internal/parser/duckdb.y:482
		{
			yyVAL.stmt = &ast.CreateTableStmt{
				Name:    ast.TableName{Name: yyDollar[3].str},
				Columns: yyDollar[5].columnDefs,
			}
		}
	case 120:
		yyDollar = yyS[yypt-9 : yypt+1]
//line internal/parser/duckdb.y:489
		{
			yyVAL.stmt = &ast.CreateTableStmt{
				Name:     ast.TableName{Name: yyDollar[6].str},
				Columns:  yyDollar[8].columnDefs,
				IfExists: true,
			}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:499
		{
			yyVAL.columnDefs = []ast.ColumnDef{yyDollar[1].columnDef}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line internal/parser/duckdb.y:500
		{
			yyVAL.columnDefs = append(yyDollar[1].columnDefs, yyDollar[3].columnDef)
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line internal/parser/duckdb.y:505
		{
			yyVAL.columnDef = ast.ColumnDef{Name: yyDollar[1].str, Type: yyDollar[2].dataType}
		}
	case 124:
		yyDollar = yyS[yypt-4 : yypt+1]
//line internal/parser/duckdb.y:509
		{
			yyVAL.columnDef = ast.ColumnDef{Name: yyDollar[1].str, Type: yyDollar[2].dataType, NotNull: true}
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
//line internal/parser/duckdb.y:513
		{
			yyVAL.columnDef = ast.ColumnDef{Name: yyDollar[1].str, Type: yyDollar[2].dataType, PrimaryKey: true}
		}
	case 126:
		yyDollar = yyS[yypt-4 : yypt+1]
//line internal/parser/duckdb.y:517
		{
			yyVAL.columnDef = ast.ColumnDef{Name: yyDollar[1].str, Type: yyDollar[2].dataType, DefaultVal: yyDollar[4].expr}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:523
		{
			yyVAL.dataType = ast.Integer
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:524
		{
			yyVAL.dataType = ast.BigInt
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:525
		{
			yyVAL.dataType = ast.SmallInt
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:526
		{
			yyVAL.dataType = ast.TinyInt
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:527
		{
			yyVAL.dataType = ast.Boolean
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:528
		{
			yyVAL.dataType = ast.Float
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:529
		{
			yyVAL.dataType = ast.Double
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:530
		{
			yyVAL.dataType = ast.Decimal
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:531
		{
			yyVAL.dataType = ast.Varchar
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:532
		{
			yyVAL.dataType = ast.Varchar
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:533
		{
			yyVAL.dataType = ast.Date
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:534
		{
			yyVAL.dataType = ast.Time
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:535
		{
			yyVAL.dataType = ast.Timestamp
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:536
		{
			yyVAL.dataType = ast.Blob
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:537
		{
			yyVAL.dataType = ast.UUID
		}
	case 142:
		yyDollar = yyS[yypt-4 : yypt+1]
//line internal/parser/duckdb.y:539
		{
			yyVAL.dataType = &ast.ListType{ElementType: yyDollar[3].dataType}
		}
	case 143:
		yyDollar = yyS[yypt-4 : yypt+1]
//line internal/parser/duckdb.y:543
		{
			var fields []ast.StructField
			for _, name := range yyDollar[3].strs {
				fields = append(fields, ast.StructField{Name: name, Type: ast.Varchar})
			}
			yyVAL.dataType = &ast.StructType{Fields: fields}
		}
	case 144:
		yyDollar = yyS[yypt-6 : yypt+1]
//line internal/parser/duckdb.y:551
		{
			yyVAL.dataType = &ast.MapType{KeyType: yyDollar[3].dataType, ValueType: yyDollar[5].dataType}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:557
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line internal/parser/duckdb.y:558
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line internal/parser/duckdb.y:564
		{
			yyVAL.stmt = &ast.DropTableStmt{Name: ast.TableName{Name: yyDollar[3].str}}
		}
	case 148:
		yyDollar = yyS[yypt-5 : yypt+1]
//line internal/parser/duckdb.y:568
		{
			yyVAL.stmt = &ast.DropTableStmt{Name: ast.TableName{Name: yyDollar[5].str}, IfExists: true}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:575
		{
			yyVAL.str = yyDollar[1].str
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:579
		{
			yyVAL.str = yyDollar[1].str
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:583
		{
			yyVAL.integer = yyDollar[1].integer
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:587
		{
			yyVAL.float = yyDollar[1].float
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:591
		{
			yyVAL.boolean = true
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line internal/parser/duckdb.y:592
		{
			yyVAL.boolean = false
		}
	}
	goto yystack /* stack new state and value */
}
